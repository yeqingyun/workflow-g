<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gionee.gniflow.integration.dao.EngineerDao">
  
  <sql id="columns">
    ID, ADDRESS, USERID, NAME, TEL, CREATETIME, CREATEBY, UPDATETIME, UPDATEBY,	STATUS
  </sql>

  <resultMap type="com.gionee.gniflow.biz.model.Engineer" id="result">
	<id property="id" column="ID"/>
	<result property="address" column="ADDRESS"/>
	<result property="userId" column="USERID"/>
	<result property="name" column="NAME"/>
	<result property="tel" column="TEL"/>
	<result property="createTime" column="CREATETIME"/>
	<result property="createBy" column="CREATEBY"/>
	<result property="updateTime" column="UPDATETIME"/>
	<result property="updateBy" column="UPDATEBY"/>
	<result property="status" column="STATUS"/>
  </resultMap>

  <insert id="insert" parameterType="com.gionee.gniflow.biz.model.Engineer">
    insert into ENGINEER (<include refid="columns"/>) values (
    #{nextId},
    #{address},
    #{userId},
    #{name},
    #{tel},
    #{createTime},
    #{createBy},
    #{updateTime},
    #{updateBy},
	#{normalStatus}
    )
  </insert>

  <update id="update" parameterType="com.gionee.gniflow.biz.model.Engineer">
    update ENGINEER
    <set>
      <if test="address != null">
        ADDRESS = #{address},
      </if>
      <if test="userId != null">
        USERID = #{userId},
      </if>
      <if test="name != null">
        NAME = #{name},
      </if>
      <if test="tel != null">
        TEL = #{tel},
      </if>
      <if test="updateTime != null">
        UPDATETIME = #{updateTime},
      </if>
      <if test="updateBy != null">
        UPDATEBY = #{updateBy},
      </if>
      <if test="status != null">
        STATUS = #{status},
      </if>
    </set>
    where ID = #{id}
  </update>

  <delete id="delete" parameterType="Integer">
	delete ENGINEER where ID = #{_parameter}
  </delete>

  <select id="getAll" parameterType="map" resultMap="result">
	select <include refid="columns"/> from ENGINEER
	<where>
		status = 0
	  <if test="code != null and code !=''">
			AND ID IN 
			<foreach collection="code" index="index" item="item" open="(" separator="," close=")">  
				#{item}  
			</foreach>
	  </if>
	  <if test="address != null">
        and ADDRESS = #{address}
	  </if>
	  <if test="userId != null">
        and USERID = #{userId}
	  </if>
	  <if test="name != null">
        and NAME = #{name}
	  </if>
	  <if test="tel != null">
        and TEL = #{tel}
	  </if>
	</where>
  </select>
  
  <select id="getCountByAddress" parameterType="map" resultType="Integer">
  	select count(NAME) from ENGINEER
  	<where>
  		status = 0
  		<if test="address != null and address != ''">
  			and ADDRESS = #{address}
  		</if>
  	</where>
  </select>

  <select id="getPage" parameterType="map" resultMap="result">
    select * from ( select a.*, ROWNUM rnum from (
      select <include refid="columns"/> from ENGINEER
      <where>
        <if test="address != null">
          and ADDRESS = #{address}
        </if>
        <if test="userId != null">
          and USERID = #{userId}
        </if>
        <if test="name != null">
          and NAME like  '%'||#{name}||'%'
        </if>
        <if test="tel != null">
          and TEL = #{tel}
        </if>
        <if test="status != null">
          and status = #{status}
        </if>
      </where>
    ) a where ROWNUM &lt; #{lastRow}) where rnum  &gt;= #{firstRow} order by id desc
  </select>
  <select id="getPageCount" parameterType="map" resultType="int">
    select count(*) from ENGINEER
    <where>
      <if test="address != null">
        and ADDRESS = #{address}
      </if>
      <if test="userId != null">
        and USERID = #{userId}
      </if>
      <if test="name != null">
        and NAME like  '%'||#{name}||'%'
      </if>
      <if test="tel != null">
        and TEL = #{tel}
      </if>
      <if test="status != null">
        and status = #{status}
      </if>
    </where>
  </select>

  <select id="get" parameterType="Integer" resultMap="result">
	select <include refid="columns"/> from ENGINEER	where ID = #{_parameter}
  </select>
  
  <select id="getAddress" resultMap="result">
	select distinct id,address from ENGINEER where status = 0
  </select>
  
  <select id="getUserById" parameterType="String" resultMap="result">
  	select <include refid="columns"/> from ENGINEER where USERID = #{userId}
  </select>

</mapper>
