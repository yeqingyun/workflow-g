<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gionee.gniflow.integration.dao.BusJobPreparationDao">
  
  <sql id="columns">
    ID, ORG_ID, ORG_NAME, POSITIONS, GRADE, PLAIT, <!-- EXIST_NUM, --> ROOT_ORG_ID, ROOT_ORG_NAME,SALARY_RANGE,
	STATUS, REMARK, CREATE_BY, CREATE_TIME, UPDATE_BY, UPDATE_TIME
  </sql>

  <resultMap type="com.gionee.gniflow.biz.model.BusJobPreparation" id="result">
	<id property="id" column="ID"/>
	<result property="orgId" column="ORG_ID"/>
	<result property="orgName" column="ORG_NAME"/>
	<result property="positions" column="POSITIONS"/>
	<result property="grade" column="GRADE"/>
	<result property="plait" column="PLAIT"/>
	<!-- <result property="existNum" column="EXIST_NUM"/> -->
	<result property="rootOrgId" column="ROOT_ORG_ID"/>
	<result property="rootOrgName" column="ROOT_ORG_NAME"/>
	<result property="salaryRange" column="SALARY_RANGE"/>
	<result property="status" column="STATUS"/>
	<result property="remark" column="REMARK"/>
	<result property="createBy" column="CREATE_BY"/>
	<result property="createTime" column="CREATE_TIME"/>
	<result property="updateBy" column="UPDATE_BY"/>
	<result property="updateTime" column="UPDATE_TIME"/>
  </resultMap>
  
  <resultMap type="com.gionee.gniflow.biz.model.BusJobPreparation" id="statResult">
	<id property="id" column="ID"/>
	<result property="orgId" column="ORG_ID"/>
	<result property="orgName" column="ORG_NAME"/>
	<result property="positions" column="POSITIONS"/>
	<result property="grade" column="GRADE"/>
	<result property="plait" column="PLAIT"/>
	<!-- <result property="existNum" column="EXIST_NUM"/> -->
	<result property="rootOrgId" column="ROOT_ORG_ID"/>
	<result property="rootOrgName" column="ROOT_ORG_NAME"/>
	<result property="salaryRange" column="SALARY_RANGE"/>
  </resultMap>

  <insert id="insert" parameterType="com.gionee.gniflow.biz.model.BusJobPreparation">
    insert into BUS_JOB_PREPARATION (<include refid="columns"/>) values (
    #{nextId},
    #{orgId},
    #{orgName},
    #{positions},
    #{grade},
    #{plait},
   <!--  #{existNum}, -->
    #{rootOrgId},
    #{rootOrgName},
    #{salaryRange},
	#{normalStatus},
	#{remark,jdbcType=VARCHAR},
	#{currentAccount},
	#{currentTime},
	#{currentAccount},
	#{currentTime}
    )
  </insert>

  <update id="update" parameterType="com.gionee.gniflow.biz.model.BusJobPreparation">
    update BUS_JOB_PREPARATION
    <set>
      <if test="orgId != null">
        ORG_ID = #{orgId},
      </if>
      <if test="orgName != null">
        ORG_NAME = #{orgName},
      </if>
      <if test="positions != null">
        POSITIONS = #{positions},
      </if>
      <if test="grade != null">
        GRADE = #{grade},
      </if>
      <if test="plait != null">
        PLAIT = #{plait},
      </if>
     <!--  <if test="existNum != null">
        EXIST_NUM = #{existNum},
      </if> -->
      <if test="rootOrgId != null">
        ROOT_ORG_ID = #{rootOrgId},
      </if>
      <if test="rootOrgName != null">
        ROOT_ORG_NAME = #{rootOrgName},
      </if>
      <if test="salaryRange != null">
        SALARY_RANGE = #{salaryRange},
      </if>
      <if test="status != null">
        STATUS = #{status},
      </if>
      <if test="remark != null">
        REMARK = #{remark},
      </if>
      UPDATE_BY = #{currentAccount},
      UPDATE_TIME = #{currentTime}
    </set>
    where ID = #{id}
  </update>

  <delete id="delete" parameterType="Integer">
	delete BUS_JOB_PREPARATION where ID = #{_parameter}
  </delete>

  <select id="getAll" parameterType="map" resultMap="result">
	select <include refid="columns"/> from BUS_JOB_PREPARATION
	<where>
	  <if test="orgId != null">
        and ORG_ID = #{orgId}
	  </if>
	  <if test="orgName != null">
        and ORG_NAME = #{orgName}
	  </if>
	  <if test="positions != null">
        and POSITIONS = #{positions}
	  </if>
	  <if test="grade != null">
        and GRADE = #{grade}
	  </if>
	  <if test="plait != null">
        and PLAIT = #{plait}
	  </if>
	  <!-- <if test="existNum != null">
        and EXIST_NUM = #{existNum}
	  </if> -->
	  <if test="rootOrgId != null">
        and ROOT_ORG_ID = #{rootOrgId}
	  </if>
	  <if test="rootOrgName != null">
        and ROOT_ORG_NAME = #{rootOrgName}
	  </if>
	  <if test="salaryRange != null">
        and SALARY_RANGE = #{salaryRange}
	  </if>
	</where>
  </select>

  <select id="getPage" parameterType="map" resultMap="result">
    select * from ( select a.*, ROWNUM rnum from (
      select <include refid="columns"/> from BUS_JOB_PREPARATION
      <where>
        <if test="orgId != null">
          and ORG_ID = #{orgId}
        </if>
        <if test="orgName != null">
          and ORG_NAME = #{orgName}
        </if>
        <if test="positions != null">
          and POSITIONS = #{positions}
        </if>
        <if test="grade != null">
          and GRADE = #{grade}
        </if>
        <if test="plait != null">
          and PLAIT = #{plait}
        </if>
       <!--  <if test="existNum != null">
          and EXIST_NUM = #{existNum}
        </if> -->
        <if test="rootOrgId != null">
          and ROOT_ORG_ID = #{rootOrgId}
        </if>
        <if test="rootOrgName != null">
          and ROOT_ORG_NAME = #{rootOrgName}
        </if>
      </where>
    ) a where ROWNUM &lt; #{lastRow}) where rnum  &gt;= #{firstRow}
  </select>
  <select id="getPageCount" parameterType="map" resultType="int">
    select count(*) from BUS_JOB_PREPARATION
    <where>
      <if test="orgId != null">
        and ORG_ID = #{orgId}
      </if>
      <if test="orgName != null">
        and ORG_NAME = #{orgName}
      </if>
      <if test="positions != null">
        and POSITIONS = #{positions}
      </if>
      <if test="grade != null">
        and GRADE = #{grade}
      </if>
      <if test="plait != null">
        and PLAIT = #{plait}
      </if>
      <!-- <if test="existNum != null">
        and EXIST_NUM = #{existNum}
      </if> -->
      <if test="rootOrgId != null">
        and ROOT_ORG_ID = #{rootOrgId}
      </if>
      <if test="rootOrgName != null">
        and ROOT_ORG_NAME = #{rootOrgName}
      </if>
      <if test="salaryRange != null">
        and SALARY_RANGE = #{salaryRange}
	  </if>
    </where>
  </select>

  <select id="get" parameterType="Integer" resultMap="result">
	select <include refid="columns"/> from BUS_JOB_PREPARATION
	where ID = #{_parameter}
  </select>
  
  <select id="statBusJobPreparation" parameterType="Integer" resultMap="statResult">
  	 select 
	       max(id) as id,
	       max(b.org_id) as org_id,
	       b.org_name,
	       b.positions,
	       max(b.grade) as grade,
	       max(b.plait) as plait,
	       <!-- max(b.exist_num) as exist_num, -->
	       max(b.root_org_id) as root_org_id,
	       b.root_org_name,
	       max(b.salary_range) as salary_range
	 from bus_job_preparation b
	 where b.status > -1 and exists (select o.id
	                      from auth_organization o
	                      where b.org_id = o.id
	                     start with o.id = #{_parameter}
	                    connect by o.pid = prior o.id
	              )
	 group by b.org_name, b.positions, b.root_org_name
	 order by b.org_name
  </select>

	<select id="getJob" parameterType="String" resultMap="result">
		select * from bus_job_preparation where org_id = #{deptId}
  	</select>
</mapper>
