<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gionee.gniflow.integration.dao.BpmUserRoleDao">
  
  <sql id="columns">
    USER_ID, ROLE_ID,
	STATUS, REMARK, CREATE_BY, CREATE_TIME, UPDATE_BY, UPDATE_TIME
  </sql>

  <resultMap type="com.gionee.gniflow.biz.model.BpmUserRole" id="result">
	<result property="userId" column="USER_ID"/>
	<result property="roleId" column="ROLE_ID"/>
	<result property="status" column="STATUS"/>
	<result property="remark" column="REMARK"/>
	<result property="createBy" column="CREATE_BY"/>
	<result property="createTime" column="CREATE_TIME"/>
	<result property="updateBy" column="UPDATE_BY"/>
	<result property="updateTime" column="UPDATE_TIME"/>
  </resultMap>
  
  <resultMap type="com.gionee.gniflow.web.response.BpmUserRoleResponse" id="resultResponse">
	<result property="userId" column="USER_ID"/>
	<result property="roleId" column="ROLE_ID"/>
	<result property="status" column="STATUS"/>
	<result property="account" column="account"/>
	<result property="userName" column="user_name"/>
	<result property="orgId" column="org_id"/>
	<result property="orgName" column="org_name"/>
	<result property="updateTime" column="UPDATE_TIME"/>
	<result property="remark" column="REMARK"/>
	<result property="createBy" column="CREATE_BY"/>
	<result property="createTime" column="CREATE_TIME"/>
	<result property="updateBy" column="UPDATE_BY"/>
  </resultMap>
  
  <insert id="insert" parameterType="com.gionee.gniflow.biz.model.BpmUserRole">
    insert into BPM_USER_ROLE (<include refid="columns"/>) values (
    #{userId},
    #{roleId},
	#{normalStatus},
	#{remark,jdbcType=VARCHAR},
	#{currentAccount},
	#{currentTime},
	#{currentAccount},
	#{currentTime}
    )
  </insert>

  <delete id="delete" parameterType="map">
	delete BPM_USER_ROLE  t
 	<where>
        <if test="userId != null">
       	 and t.user_id = #{userId}
	  	</if>
	  	<if test="roleId != null">
       	 and t.role_id = #{roleId}
	  	</if>
      </where>

  </delete>
  
  <delete id="deleteByRoleId" parameterType="Integer">
	delete BPM_USER_ROLE where ROLE_ID = #{_parameter}
  </delete>
  
  <select id="getPage" parameterType="map" resultMap="resultResponse">
    SELECT SUB.* FROM ( select RES.* , row_number() over (ORDER BY user_id) rnk FROM (
      select t.USER_ID, t.ROLE_ID,t.STATUS, t.REMARK, t.CREATE_BY, t.CREATE_TIME, t.UPDATE_BY, t.UPDATE_TIME,a.account,a.name as user_name,ao.name as org_name
      from BPM_USER_ROLE t
      left join AUTH_USER a on a.id = t.user_id
      left join AUTH_ORGANIZATION ao on ao.id = a.org_id
      <where>
        <if test="name != null">
          and a.name like '%'|| #{name}||'%'
        </if>
        <if test="account != null">
       	 and a.account = #{account}
	  	</if>
	  	<if test="roleId != null">
       	 and t.role_id = #{roleId}
	  	</if>
      </where>
    )RES ) SUB WHERE SUB.rnk &gt;= #{firstRow} AND SUB.rnk &lt; #{lastRow}
  </select>
  
  <select id="getPageCount" parameterType="map" resultType="int">
    select count(*) 
      from BPM_USER_ROLE t
      left join AUTH_USER a on a.id = t.user_id
      left join AUTH_ORGANIZATION ao on ao.id = a.org_id
    <where>
        <if test="name != null">
          and a.name like '%'|| #{name}||'%'
        </if>
        <if test="account != null">
       	 and a.account = #{account}
	  	</if>
	  	<if test="roleId != null">
       	 and t.role_id = #{roleId}
	  	</if>
    </where>
  </select>
  <select id="getAll" parameterType="map" resultMap="result">
	select <include refid="columns"/> from BPM_USER_ROLE
	<where>
	  <if test="userId != null">
        and USER_ID = #{userId}
	  </if>
	  <if test="roleId != null">
        and ROLE_ID = #{roleId}
	  </if>
	</where>
  </select>
  
  <!-- 找出用户角色所对应的流程定义KEY -->
  <select id="getUserProcessDefKey" parameterType="Integer" resultType="java.lang.String">
	select rp.procdef_key from bpm_user_role ur
	inner join bpm_role r on ur.role_id = r.id
	inner join bpm_role_procdef rp on r.id = rp.role_id
	where ur.user_id = #{userId}
	group by rp.procdef_key 
  </select>
  
</mapper>
